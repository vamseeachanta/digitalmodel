# OrcaFlex Mooring Tension Iteration Workflow
# Specialized workflow for automated mooring pretension adjustment
# Created: 2025-01-17

workflow:
  name: mooring_tension_iteration
  description: Automated mooring line length adjustment to achieve target pretensions
  version: 1.0.0
  
  capabilities:
    - Read target tension CSV files
    - Modify Length[2] sections in mooring lines
    - Run static analysis to calculate tensions
    - Apply damped adjustments using formula
    - Iterate until convergence within tolerance
    - Batch process multiple models
    - Generate detailed reports
    
  configuration:
    section_to_modify: 2  # Modify Length[2] as per specs
    convergence_tolerance: 0.01  # 1% tolerance
    damping_factor: 0.7
    max_iterations: 10
    parallel_processing: true
    
  input_requirements:
    - model_file: "*.yml"  # OrcaFlex YAML model
    - target_tensions: "*.csv"  # Target tension CSV
    - includefile: "*.yml"  # Mooring line lengths includefile
    
  process_steps:
    1_initialization:
      - Load OrcaFlex model
      - Read target tensions from CSV
      - Parse includefile for current lengths
      - Validate section_to_modify parameter
      
    2_analysis_loop:
      - Run static analysis
      - Extract mooring tensions at anchors
      - Calculate tension errors vs targets
      - Check convergence criteria
      
    3_adjustment:
      - Calculate length adjustments using formula
      - Apply damping factor (0.7)
      - Update Length[2] values
      - Write updated includefile
      
    4_iteration:
      - Repeat analysis loop
      - Track convergence progress
      - Stop at convergence or max iterations
      
    5_reporting:
      - Generate convergence report
      - Save final tensions
      - Document adjustments made
      - Create batch summary
      
  automation_scripts:
    main_orchestrator: "src/modules/orcaflex/mooring_tension_iteration/main_orchestrator.py"
    orcaflex_interface: "src/modules/orcaflex/mooring_tension_iteration/orcaflex_interface.py"
    batch_runner: "batch_runner.py"
    step_runner: "step_by_step_runner.py"
    
  batch_configuration:
    config_file: "batch_run_all_fsts.yml"
    output_directory: "./output/fsts_lngc_pretension_results"
    models_count: 24
    
  validation:
    - Check tensions within 1% of targets
    - Verify Length[2] modifications applied
    - Confirm includefile format correct
    - Validate CSV section_to_be_modified=2
    
  troubleshooting:
    common_issues:
      - "Wrong section modified": Ensure section_to_be_modified=2 in CSV
      - "Target tensions incorrect": Restore from backup CSV files
      - "Unicode errors": Replace special characters with ASCII
      - "Convergence failure": Adjust damping factor or increase iterations