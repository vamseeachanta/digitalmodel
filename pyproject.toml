[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "digitalmodel"
version = "0.1.0"
description = "Standardized project configuration for digitalmodel"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Development Team", email = "dev@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "aiofiles==23.2.1",
    "gmsh>=4.11.0",  # GMSH Python bindings for mesh generation
    "aiosqlite==0.19.0",  # SQLite async driver fordevelopment",
    "alembic==1.12.1",
    "argon2-cffi==23.1.0",  # Alternative passwordhashing,
    "assetutilities",
    "assetutilities>=0.0.7",
    "asyncio-extras==1.3.2",  # Additional asyncutilities,
    "asyncio-mqtt==0.16.1",  # MQTT support ifneeded,
    "asyncpg==0.29.0",  # PostgreSQL asyncdriver,
    "async-timeout==4.0.3",  # Timeouthandling,
    "bandit==1.7.5",  # Securitylinting,
    "beautifulsoup4>=4.13.0,<5.0.0",
    "black>=24.0.0,<25.0.0",
    "bleach==6.1.0",  # HTMLsanitization,
    "boto3==1.34.0",  # AWS S3 if cloud storageneeded,
    "brotli==1.1.0",  # Additionalcompression,
    "build>=1.0.0",
    "bumpver",
    "bumpver>=2023.1129",
    "celery==5.3.4",
    "chardet==5.2.0",  # Character encodingdetection,
    "coverage==7.3.2",  # Codecoverage,
    "cryptography>=41.0.0",
    "cx-Oracle==6.3.1",
    "dash",
    "dash>=3.1.0,<4.0.0",
    "deepdiff",
    "deepdiff>=8.0.0,<9.0.0",
    "defusedxml==0.7.1",  # Secure XMLprocessing,
    "digitalmodel",
    "docx",
    "factory-boy==3.3.0",  # Test datafactories,
    "faker==20.1.0",  # Fake datageneration,
    "fastapi==0.104.1",
    "fastapi-limiter==0.1.5",  # Additional ratelimiting,
    "fastapi-pagination==0.12.13",  # Paginationutilities,
    "fastapi-users==12.1.2",  # User management (ifneeded),
    "flake8==6.1.0",
    "geopy==2.4.1",  # Geographic calculations (ifneeded),
    "gunicorn==21.2.0",  # Alternative touvicorn,
    "gzip==1.0",  # Built-in, but ensuringavailability,
    "h5py==3.10.0",  # HDF5format,
    "hiredis==2.2.3",
    "httpx==0.25.2",  # For testing HTTPclients,
    "hypercorn==0.15.0",  # Alternative ASGIserver,
    "imgkit",
    "imgkit>=1.2.0,<2.0.0",
    "ipython>=8.0.0",  # Enhanced Pythonshell,
    "isort>=5.13.0,<6.0.0",  # Importsorting,
    "kaleido",
    "kaleido>=0.2.0",
    "loguru",
    "loguru>=0.7.0,<1.0.0",
    "lxml==4.9.3",  # XMLprocessing,
    "magic==0.4.27",  # File type detection(python-magic),
    "marshmallow==3.20.1",  # Additionalserialization,
    "matplotlib>=3.7.0,<4.0.0",
    "memory-profiler==0.61.0",  # Memoryprofiling,
    "mypy>=1.8.0,<2.0.0",  # Typechecking,
    "newrelic==9.2.0",  # Performance monitoring(optional),
    "numpy>=1.24.0,<2.0.0",  # Usually needed withpandas,
    "openpyxl>=3.1.0,<4.0.0",  # Excelexport,
    "OrcFxAPI",
    "OrcFxAPI",  # Note: Check if version constraints areavailable,
    "pandas",
    "pandas>=2.0.0,<3.0.0",
    "passlib[bcrypt]==1.7.4",
    "pillow==10.1.0",  # Image processing
    "plotly==5.17.0",
    "poetry",
    "pre-commit==3.6.0",
    "prometheus-client==0.19.0",
    "psutil==5.9.6",  # System monitoring
    "pyarrow==14.0.1",  # Parquet format
    "pydantic==2.5.0",
    "pydantic-settings==2.1.0",
    "pyjwt==2.8.0",
    "pykalman==0.9.5",  # Kalman filters for time series
    "pymssql==2.1.3",
    "PyPDF2",
    "pypdf2>=3.0.0,<4.0.0",
    "pyproj==3.6.1",  # Coordinate transformations
    "pytest",
    "pytest>=7.4.3,<9.0.0",
    "pytest-asyncio==0.21.1",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock==3.12.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "pytest-xdist>=3.5.0,<4.0.0",  # For parallel test execution
    "python-dateutil==2.8.2",
    "python-docx>=0.8.0",
    "python-dotenv==1.0.0",
    "python-jose[cryptography]==3.3.0",  # Additional JWT support
    "python-magic==0.4.27",  # File type detection
    "python-multipart==0.0.6",
    "pyyaml",
    "pyyaml>=6.0.0,<7.0.0",
    "pyyaml==6.0.1",
    "rainflow>=3.2.0,<4.0.0",
    "redis==5.0.1",  # Already included above for caching
    "redis[hiredis]==5.0.1",
    "requests>=2.31.0,<3.0.0",
    "ruamel.yaml>=0.18.0,<1.0.0",
    "ruff>=0.3.0,<1.0.0",  # Fast Python linter
    "scikit-learn==1.3.2",
    "scipy>=1.10.0,<2.0.0",
    "scrapy",
    "scrapy>=2.11.0,<3.0.0",
    "sentry-sdk[fastapi]==1.38.0",  # Error tracking
    "slowapi==0.1.9",  # Additional rate limiting utilities
    "sphinx>=7.0.0,<8.0.0",
    "sphinx-rtd-theme>=2.0.0,<3.0.0",
    "sqlalchemy>=2.0.23,<3.0.0",
    "statsmodels==0.14.0",  # Advanced statistical models
    "structlog==23.2.0",
    "sympy>=1.12.0,<2.0.0",  # Symbolic mathematics
    "tabula",
    "tabulate",
    "tabulate>=0.9.0,<1.0.0",
    "twine>=4.0.0",
    "uncertainties==3.1.7",  # Error propagation
    "uvicorn[standard]==0.24.0",
    "validators==0.22.0",
    "webcolors",
    "webcolors>=1.13,<2.0",
    "websockets==12.0",  # WebSocket support
    "xlrd",
    "xlrd>=2.0.0,<3.0.0",
    "xlsxwriter",
    "xlsxwriter>=3.1.0,<4.0.0",
    "xlsxwriter==3.1.9",  # Excel with formatting
    "xmltodict",
    "xmltodict>=0.13.0,<1.0.0"

]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "flake8>=6.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.0",
]
docs = [
    "sphinx>=6.0",
    "sphinx-rtd-theme>=1.0",
]

[project.urls]
"Homepage" = "https://github.com/username/digitalmodel"
"Bug Tracker" = "https://github.com/username/digitalmodel/issues"
"Documentation" = "https://github.com/username/digitalmodel#readme"

[project.scripts]
digital_model = "digitalmodel.__main__:main"
test-automation = "test_automation.__main__:main"
run-to-sim = "digitalmodel.modules.orcaflex.run_to_sim_cli:main"
orcaflex-universal = "digitalmodel.modules.orcaflex.universal_cli:main"
orcaflex-sim = "digitalmodel.modules.orcaflex.universal_cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "--cov=src --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.uv]
# UV environment configuration
python = "3.11"
system = false
seed = true
compile = true

[tool.uv.pip]
index-url = "https://pypi.org/simple"
extra-index-url = []
no-cache = false
pre = false

[tool.uv.workspace]
members = [
    "src/modules/mcp-server/orcawave-mcp",
]

# MANDATORY: Parallel Processing Configuration
[tool.parallel]
enabled = true
max_workers = 5
use_threading = false  # Use multiprocessing for CPU-bound tasks
use_asyncio = true     # Use asyncio for I/O-bound tasks
batch_size = 10

[tool.parallel.rules]
# Define when to use parallel processing
file_operations = "always"      # File reading/writing
http_requests = "always"        # API calls
data_processing = "threshold"   # Based on data size
threshold_size = 1000           # Items before parallel kicks in

[tool.scripts]
# Common scripts that use parallel processing
test = "pytest -n auto"
format = "black . && isort ."
lint = "flake8 . & mypy . & pylint ."
install = "uv pip install -e ."
dev-install = "uv pip install -e .[dev]"
