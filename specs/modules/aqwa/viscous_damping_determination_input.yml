task: determine_additional_viscous_damping
context:
  analysis_source: D:\1522\ctr9\fatigue_full\rev_a08\base_files\aqwa_to_ofx\input
  specs_reference:
    - specs/modules/marine-engineering/core-analysis/hydrodynamic-coefficients
    - specs/modules/aqwa/ship-analysis/go-by-fsts-aqwa-analysis/rev_a08
  objective: Compute additional viscous damping and resulting critical damping ratios for heave, roll, and pitch.
  implementation_note: Deliver scripts/workflows that are reusable for any AQWA-generated .dat/.lis dataset (including other projects) without case-specific hardcoding.
  
  technical_decisions:
    linearization_method: Statistical linearization based on RAO amplitudes (consistent with existing AqwaRAOs.derive_damping)
    added_mass_source: Extract A_ij matrices from .LIS files (frequency-dependent and infinite-frequency limit)
    critical_damping_formula: "ζ = B_total / (2 * sqrt((I + A_inf) * C))"
    sensitivity_analysis: Compare critical damping using A(ω) vs A_inf for each DOF
    damping_breakdown: All sources (radiation + viscous + external) sum to 100%
    deck7_damping: Extract linearized drag damping coefficients (enabled by OPTIONS LDRG)
    restoring_coefficients: C33 (heave), C44 (roll), C55 (pitch) from hydrostatic analysis
    
  existing_modules_to_leverage:
    - src/digitalmodel/modules/aqwa/aqwa_analysis_raos.py (AqwaRAOs class - primary orchestrator)
    - src/digitalmodel/modules/aqwa/aqwa_analysis_damping.py (AqwaDamping.derive_damping, prepare_damping)
    - src/digitalmodel/modules/marine_analysis/aqwa_enhanced_parser.py (AQWAEnhancedParser.parse_lis_file)
    - src/digitalmodel/modules/aqwa/aqwa_dat_files.py (AqwaDATFiles - extend for Decks 5,6,7)
    - agents/aqwa (existing AQWA agent for coordination)
    
  visualization_requirements:
    library: plotly (interactive HTML reports per CLAUDE.md standards)
    charts:
      - damping_vs_frequency: Line plots for B_radiation, B_viscous, B_total across frequency range
      - percentage_stacked_bars: Damping contribution breakdown by source (radiation, viscous, external)
      - critical_damping_ratios: Bar charts comparing ζ_heave, ζ_roll, ζ_pitch across cases
      - sensitivity_comparison: Side-by-side comparison of A(ω) vs A_inf impact on critical ratios
    output_format: HTML with embedded CSV data using relative paths
    
  pseudocode:
    - "# Main Orchestration - extends AqwaRAOs class"
    - "CLASS ViscousDampingDetermination(AqwaRAOs):"
    - "    "
    - "FUNCTION orchestrate_damping_analysis(config_path):"
    - "    # Import existing modules directly"
    - "    from digitalmodel.modules.aqwa.aqwa_analysis_damping import AqwaDamping"
    - "    from digitalmodel.modules.marine_analysis.aqwa_enhanced_parser import AQWAEnhancedParser"
    - "    from digitalmodel.modules.aqwa.aqwa_dat_files import AqwaDATFiles"
    - "    import plotly.graph_objects as go"
    - "    "
    - "    config ← load_yaml(config_path)"
    - "    results_dir ← ensure_dir('specs/modules/aqwa/ship-analysis/results')"
    - "    master_results ← []"
    - "    "
    - "    FOR case IN config.cases:"
    - "        dataset ← prepare_case_dataset(case, config.analysis_source, results_dir)"
    - "        case_results ← run_case_workflow(dataset, config)"
    - "        master_results.append(case_results)"
    - "    "
    - "    aggregate_case_summaries(master_results, results_dir)"
    - "    generate_comparison_html(master_results, results_dir)"
    - "    return results_dir"
    - "FUNCTION prepare_case_dataset(case, source_root, results_dir):"
    - "    file_pairs ← glob_case_files(source_root, case.files)"
    - "    scratch_dir ← create_case_scratch(case.id, results_dir)"
    - "    FOR pair IN file_pairs:"
    - "        copy_files(pair, scratch_dir)"
    - "    manifest ← build_manifest(case, scratch_dir)"
    - "    persist_manifest(manifest, scratch_dir)"
    - "    return {id: case.id, scratch: scratch_dir, manifest: manifest}"
    - "FUNCTION build_manifest(case, scratch_dir):"
    - "    manifest.records ← []"
    - "    FOR dat_file, lis_file IN paired_files(scratch_dir):"
    - "        deck0_meta ← read_deck0_metadata(dat_file)"
    - "        record ← {"
    - "            'vessel': infer_vessel(dat_file),"
    - "            'draft': infer_draft(dat_file),"
    - "            'headings': extract_headings(deck0_meta),"
    - "            'dat': dat_file,"
    - "            'lis': lis_file"
    - "        }"
    - "        manifest.records.append(record)"
    - "    return manifest"
    - "FUNCTION run_case_workflow(dataset, config):"
    - "    parser ← AQWAEnhancedParser()"
    - "    dat_parser ← AqwaDATFiles()"
    - "    damping_analyzer ← AqwaDamping()"
    - "    CASE_RESULTS ← []"
    - "    "
    - "    FOR record IN dataset.manifest.records:"
    - "        # Validation phase"
    - "        validate_ldrg_option(record.dat)"
    - "        validate_cog_element_98000(record.dat)"
    - "        "
    - "        # Parse geometry and damping data"
    - "        dat_data ← parse_dat_geometry(record.dat, dat_parser)"
    - "        lis_data ← parse_lis_outputs(record.lis, parser)"
    - "        "
    - "        # Check frequency grid consistency"
    - "        assert dat_data.frequencies == lis_data.frequencies"
    - "        "
    - "        # Derive viscous damping using statistical linearization"
    - "        viscous_terms ← derive_viscous_damping_statistical(dat_data, lis_data)"
    - "        "
    - "        # Combine all damping sources"
    - "        total_damping ← combine_damping(viscous_terms, lis_data.radiation_damping, lis_data.external_damping)"
    - "        "
    - "        # Compute critical damping ratios (both methods)"
    - "        ratios_frequency_dependent ← compute_critical_damping_ratios(total_damping, dat_data, use_frequency_dependent=True)"
    - "        ratios_infinite_freq ← compute_critical_damping_ratios(total_damping, dat_data, use_frequency_dependent=False)"
    - "        "
    - "        # Validate DOFs present"
    - "        assert all(dof in total_damping for dof in ['B33', 'B44', 'B55'])"
    - "        "
    - "        # Store results"
    - "        result ← {"
    - "            'record_id': record.id,"
    - "            'vessel': record.vessel,"
    - "            'draft': record.draft,"
    - "            'damping': total_damping,"
    - "            'ratios': {'frequency_dependent': ratios_frequency_dependent, 'infinite_freq': ratios_infinite_freq},"
    - "            'percentages': compute_percentages(total_damping)"
    - "        }"
    - "        store_case_outputs(result, dataset.scratch)"
    - "        CASE_RESULTS.append(result)"
    - "    "
    - "    generate_case_html_reports(dataset.id, CASE_RESULTS, config)"
    - "    return CASE_RESULTS"
    - "FUNCTION parse_dat_geometry(dat_path):"
    - "    deck1 ← parse_deck(dat_path, deck_number=1)"
    - "    deck5 ← parse_deck(dat_path, deck_number=5)"
    - "    deck6 ← parse_deck(dat_path, deck_number=6)"
    - "    deck7 ← parse_deck(dat_path, deck_number=7)"
    - "    ensure_option(dat_path, option='LDRG')"
    - "    members ← merge_member_metadata(deck6, deck7, deck1.cog, deck5.geometry)"
    - "    return {cog: deck1.cog, members: members, inertia: deck1.inertia, restoring: compute_restoring(deck5)}"
    - "FUNCTION parse_lis_outputs(lis_path, parser):"
    - "    # Use AQWAEnhancedParser.parse_lis_file() method"
    - "    lis_data ← parser.parse_lis_file(lis_path)"
    - "    "
    - "    # Extract displacement RAO data (not velocity/acceleration)"
    - "    frequencies ← lis_data['frequencies']"
    - "    headings ← lis_data['headings']"
    - "    raos ← lis_data['raos']  # Contains surge, sway, heave, roll, pitch, yaw with amplitude & phase"
    - "    "
    - "    # Extract damping matrices from 'DAMPING-VARIATION WITH WAVE PERIOD/FREQUENCY' section"
    - "    # Section format: PERIOD FREQ C(1,1) C(1,2) ... C(6,6) for each frequency"
    - "    radiation_damping ← extract_damping_matrices(lis_path, section='DAMPING-VARIATION')"
    - "    "
    - "    # Extract critical damping percentages from 'APPROXIMATE PERCENTAGE CRITICAL DAMPING' section"
    - "    percent_critical_damping ← extract_section(lis_path, 'PERCENTAGE  CRITICAL DAMPING')"
    - "    "
    - "    # Extract added mass matrices (A_ij) - frequency-dependent and infinite frequency limit"
    - "    added_mass ← extract_added_mass_matrices(lis_path)"
    - "    added_mass_inf ← added_mass.at_infinite_frequency()"
    - "    "
    - "    # Extract drag table from 'GEOMETRY       DRAG      ADDED MASS' section"
    - "    drag_table ← extract_morison_drag_table(lis_path)"
    - "    "
    - "    # Extract external/user-specified damping from 'H/I DAMPING FOR FORCE ON STR#' sections"
    - "    external_damping ← extract_external_damping(lis_path)"
    - "    "
    - "    return {"
    - "        'frequencies': frequencies,"
    - "        'headings': headings,"
    - "        'raos': raos,"
    - "        'radiation_damping': radiation_damping,"
    - "        'added_mass': added_mass,"
    - "        'added_mass_inf': added_mass_inf,"
    - "        'drag_table': drag_table,"
    - "        'external_damping': external_damping,"
    - "        'percent_critical': percent_critical_damping"
    - "    }"
    - "FUNCTION derive_viscous_damping_statistical(dat_data, lis_data):"
    - "    # Statistical linearization: B_eq = (8/3π) * ρ * Cd * A * ω * X_rms"
    - "    # Consistent with existing AqwaRAOs.derive_damping() implementation"
    - "    "
    - "    member_drag ← align_drag_to_members(dat_data.members, lis_data.drag_table)"
    - "    body_frame_drag ← transform_to_body_axes(member_drag, dat_data.members.geometry)"
    - "    "
    - "    # Extract RAO amplitudes for heave, roll, pitch"
    - "    heave_rao ← lis_data.raos['heave']['amplitude']  # [n_freq × n_heading]"
    - "    roll_rao ← lis_data.raos['roll']['amplitude']"
    - "    pitch_rao ← lis_data.raos['pitch']['amplitude']"
    - "    "
    - "    # Compute RMS amplitudes (over all headings)"
    - "    heave_rms ← compute_rms(heave_rao, axis=headings)"
    - "    roll_rms ← compute_rms(roll_rao, axis=headings)"
    - "    pitch_rms ← compute_rms(pitch_rao, axis=headings)"
    - "    "
    - "    # Statistical linearization for each DOF"
    - "    B33_viscous ← (8 / (3 * π)) * ρ * body_frame_drag.Cd_heave * body_frame_drag.A_heave * frequencies * heave_rms"
    - "    B44_viscous ← (8 / (3 * π)) * ρ * body_frame_drag.Cd_roll * body_frame_drag.A_roll * frequencies * roll_rms"
    - "    B55_viscous ← (8 / (3 * π)) * ρ * body_frame_drag.Cd_pitch * body_frame_drag.A_pitch * frequencies * pitch_rms"
    - "    "
    - "    # Also compute viscous moments from lever arms"
    - "    viscous_moments ← compute_viscous_moments(body_frame_drag, dat_data.members.lever_arms, [heave_rms, roll_rms, pitch_rms])"
    - "    "
    - "    # Add moment contributions to B44 and B55"
    - "    B44_viscous += viscous_moments.roll"
    - "    B55_viscous += viscous_moments.pitch"
    - "    "
    - "    return {B33: B33_viscous, B44: B44_viscous, B55: B55_viscous}"
    - "FUNCTION combine_damping(viscous_terms, radiation_damping, external_damping):"
    - "    # Combine all damping sources - total = 100%"
    - "    total_B33 ← radiation_damping.B33 + viscous_terms.B33 + external_damping.B33"
    - "    total_B44 ← radiation_damping.B44 + viscous_terms.B44 + external_damping.B44"
    - "    total_B55 ← radiation_damping.B55 + viscous_terms.B55 + external_damping.B55"
    - "    "
    - "    # Compute percentage breakdown for each DOF"
    - "    percentages_B33 ← {"
    - "        'radiation': (radiation_damping.B33 / total_B33) * 100,"
    - "        'viscous': (viscous_terms.B33 / total_B33) * 100,"
    - "        'external': (external_damping.B33 / total_B33) * 100"
    - "    }"
    - "    percentages_B44 ← {"
    - "        'radiation': (radiation_damping.B44 / total_B44) * 100,"
    - "        'viscous': (viscous_terms.B44 / total_B44) * 100,"
    - "        'external': (external_damping.B44 / total_B44) * 100"
    - "    }"
    - "    percentages_B55 ← {"
    - "        'radiation': (radiation_damping.B55 / total_B55) * 100,"
    - "        'viscous': (viscous_terms.B55 / total_B55) * 100,"
    - "        'external': (external_damping.B55 / total_B55) * 100"
    - "    }"
    - "    "
    - "    # Validate percentages sum to 100% (within tolerance)"
    - "    assert abs(sum(percentages_B33.values()) - 100.0) < 0.01"
    - "    assert abs(sum(percentages_B44.values()) - 100.0) < 0.01"
    - "    assert abs(sum(percentages_B55.values()) - 100.0) < 0.01"
    - "    "
    - "    return {"
    - "        'total': {B33: total_B33, B44: total_B44, B55: total_B55},"
    - "        'components': {radiation: radiation_damping, viscous: viscous_terms, external: external_damping},"
    - "        'percentages': {B33: percentages_B33, B44: percentages_B44, B55: percentages_B55}"
    - "    }"
    - "FUNCTION compute_critical_damping_ratios(total_damping, dat_data, use_frequency_dependent=False):"
    - "    # Critical damping formula: ζ = B_total / (2 * sqrt((I + A) * C))"
    - "    # where I = inertia, A = added mass, C = restoring coefficient, B = damping"
    - "    "
    - "    ratios ← {}"
    - "    dof_map ← {heave: 'B33', roll: 'B44', pitch: 'B55'}"
    - "    inertia_map ← {heave: 'I33', roll: 'I44', pitch: 'I55'}"
    - "    restoring_map ← {heave: 'C33', roll: 'C44', pitch: 'C55'}"
    - "    addedmass_map ← {heave: 'A33', roll: 'A44', pitch: 'A55'}"
    - "    "
    - "    FOR dof IN ['heave', 'roll', 'pitch']:"
    - "        B ← total_damping.total[dof_map[dof]]  # Total damping [n_freq × 1]"
    - "        I ← dat_data.inertia[inertia_map[dof]]  # Mass or moment of inertia (scalar)"
    - "        C ← dat_data.restoring[restoring_map[dof]]  # Restoring coefficient (scalar)"
    - "        "
    - "        IF use_frequency_dependent:"
    - "            # Use frequency-dependent added mass A(ω)"
    - "            A ← dat_data.added_mass[addedmass_map[dof]]  # [n_freq × 1]"
    - "            ω_n ← sqrt(C / (I + A))  # Natural frequency [n_freq × 1]"
    - "            ζ ← B / (2 * (I + A) * ω_n)  # Critical damping ratio [n_freq × 1]"
    - "        ELSE:"
    - "            # Use infinite-frequency added mass A_inf (recommended)"
    - "            A_inf ← dat_data.added_mass_inf[addedmass_map[dof]]  # Scalar"
    - "            ω_n ← sqrt(C / (I + A_inf))  # Natural frequency (scalar)"
    - "            ζ ← B / (2 * (I + A_inf) * ω_n)  # Critical damping ratio [n_freq × 1]"
    - "        "
    - "        # Store results with natural frequency and critical ratio"
    - "        ratios[dof] ← {"
    - "            'critical_damping_ratio': ζ,"
    - "            'natural_frequency_rad_s': ω_n,"
    - "            'natural_period_s': 2*π / ω_n,"
    - "            'total_damping': B,"
    - "            'inertia': I,"
    - "            'added_mass': A_inf if not use_frequency_dependent else A,"
    - "            'restoring': C"
    - "        }"
    - "    "
    - "    return ratios"
    - "FUNCTION generate_case_html_reports(case_id, case_results, config):"
    - "    # Generate interactive Plotly charts per CLAUDE.md HTML reporting standards"
    - "    "
    - "    # 1. Damping vs Frequency Charts (line plots)"
    - "    fig_damping_freq ← create_plotly_figure()"
    - "    FOR result IN case_results:"
    - "        frequencies ← result.damping.frequencies"
    - "        add_trace(fig_damping_freq, x=frequencies, y=result.damping.components.radiation.B33, name=f'{result.vessel}_radiation', mode='lines')"
    - "        add_trace(fig_damping_freq, x=frequencies, y=result.damping.components.viscous.B33, name=f'{result.vessel}_viscous', mode='lines')"
    - "        add_trace(fig_damping_freq, x=frequencies, y=result.damping.total.B33, name=f'{result.vessel}_total', mode='lines+markers')"
    - "    fig_damping_freq.update_layout(title='Heave Damping vs Frequency', xaxis_title='Frequency (rad/s)', yaxis_title='Damping (N·s/m)')"
    - "    "
    - "    # Repeat for B44 (roll) and B55 (pitch)"
    - "    fig_roll ← create_damping_chart(case_results, dof='B44', title='Roll Damping vs Frequency')"
    - "    fig_pitch ← create_damping_chart(case_results, dof='B55', title='Pitch Damping vs Frequency')"
    - "    "
    - "    # 2. Percentage Stacked Bar Charts"
    - "    fig_percentages ← create_plotly_figure()"
    - "    vessel_names ← [r.vessel for r in case_results]"
    - "    add_bar(fig_percentages, x=vessel_names, y=[r.percentages.B33.radiation for r in case_results], name='Radiation', stack='B33')"
    - "    add_bar(fig_percentages, x=vessel_names, y=[r.percentages.B33.viscous for r in case_results], name='Viscous', stack='B33')"
    - "    add_bar(fig_percentages, x=vessel_names, y=[r.percentages.B33.external for r in case_results], name='External', stack='B33')"
    - "    fig_percentages.update_layout(barmode='stack', title='Damping Contribution Breakdown (%)', yaxis_title='Percentage (%)')"
    - "    "
    - "    # 3. Critical Damping Ratio Comparison Charts"
    - "    fig_critical ← create_plotly_figure()"
    - "    add_bar(fig_critical, x=vessel_names, y=[r.ratios.infinite_freq.heave.critical_damping_ratio for r in case_results], name='Heave')"
    - "    add_bar(fig_critical, x=vessel_names, y=[r.ratios.infinite_freq.roll.critical_damping_ratio for r in case_results], name='Roll')"
    - "    add_bar(fig_critical, x=vessel_names, y=[r.ratios.infinite_freq.pitch.critical_damping_ratio for r in case_results], name='Pitch')"
    - "    fig_critical.update_layout(barmode='group', title='Critical Damping Ratios (A_inf method)', yaxis_title='Critical Damping Ratio ζ')"
    - "    "
    - "    # 4. Sensitivity Comparison (A(ω) vs A_inf)"
    - "    fig_sensitivity ← create_sensitivity_comparison_chart(case_results)"
    - "    "
    - "    # Save CSV data with relative paths"
    - "    tables ← assemble_summary_tables(case_results)"
    - "    save_csv(f'{case_id}_damping_summary.csv', tables.damping)"
    - "    save_csv(f'{case_id}_critical_ratios.csv', tables.critical_ratios)"
    - "    save_csv(f'{case_id}_percentages.csv', tables.percentages)"
    - "    "
    - "    # Generate HTML report with embedded Plotly charts"
    - "    html_content ← generate_html_template("
    - "        title=f'Viscous Damping Analysis - {case_id}',"
    - "        charts=[fig_damping_freq, fig_roll, fig_pitch, fig_percentages, fig_critical, fig_sensitivity],"
    - "        tables=[tables.damping, tables.critical_ratios, tables.percentages],"
    - "        csv_paths=['../data/{case_id}_damping_summary.csv', '../data/{case_id}_critical_ratios.csv']"
    - "    )"
    - "    "
    - "    save_html(f'specs/modules/aqwa/ship-analysis/results/{case_id}_report.html', html_content)"
    - "    "
    - "FUNCTION aggregate_case_summaries(master_results, results_dir):"
    - "    combined ← collect_all_case_data(master_results)"
    - "    export_master_csv(combined, results_dir / 'viscous_damping_master_summary.csv')"
    - "    export_comparison_tables(combined, results_dir)"
  cases:
    - id: fst_pair_l015
      description: FST2L015_FST1L015 across MWL/HWL/LWL
      files: [FST2L015_FST1L015_MWL.{DAT,LIS}, FST2L015_FST1L015_HWL.{DAT,LIS}, FST2L015_FST1L015_LWL.{DAT,LIS}]
    - id: fst_pair_l095
      description: FST2L095_FST1L095 across MWL/HWL/LWL
      files: [FST2L095_FST1L095_MWL.{DAT,LIS}, FST2L095_FST1L095_HWL.{DAT,LIS}, FST2L095_FST1L095_LWL.{DAT,LIS}]
    - id: lngc_125km3
      description: LNGC 125 km3 port and starboard combinations across MWL/HWL/LWL
      files: [FSTS_L015_125KM3_L100_PB_*.{DAT,LIS}, FSTS_L015_125KM3_L100_SB_*.{DAT,LIS}, FSTS_L095_125KM3_L000_PB_*.{DAT,LIS}, FSTS_L095_125KM3_L000_SB_*.{DAT,LIS}]
    - id: lngc_180km3
      description: LNGC 180 km3 port and starboard combinations across MWL/HWL/LWL
      files: [FSTS_L015_180KM3_L100_PB_*.{DAT,LIS}, FSTS_L015_180KM3_L100_SB_*.{DAT,LIS}, FSTS_L095_180KM3_L000_PB_*.{DAT,LIS}, FSTS_L095_180KM3_L000_SB_*.{DAT,LIS}]
implementation_summary:
  phase_1_extend_modules:
    duration: 1-2 days
    tasks:
      - Extend AqwaDATFiles class with get_dc_05_body, get_dc_06_body, get_dc_07_body parsers
      - Add Deck 7 linearized drag damping extraction (LDRG option validation)
      - Extend AqwaDamping class with statistical_linearization_method
      - Add validation methods (validate_ldrg_option, validate_cog_element_98000)
      
  phase_2_orchestration:
    duration: 1 day
    tasks:
      - Create ViscousDampingDetermination class extending AqwaRAOs
      - Implement viscous_damping_router() following rao_router() pattern
      - Build case iteration logic with file manifest generation
      - Add frequency grid consistency validation
      
  phase_3_damping_calculations:
    duration: 2-3 days
    tasks:
      - Implement statistical linearization (B_eq formula)
      - Parse .LIS damping matrices ('DAMPING-VARIATION' sections)
      - Extract added mass (frequency-dependent and A_inf)
      - Compute critical damping ratios (both methods)
      - Calculate percentage breakdown (radiation + viscous + external = 100%)
      - Validate DOF presence (B33, B44, B55)
      
  phase_4_html_reporting:
    duration: 1 day
    tasks:
      - Create Plotly interactive charts (4 chart types)
      - Generate HTML reports with embedded CSV links
      - Implement sensitivity comparison visualizations
      - Create master summary aggregation across all cases
      
  total_estimate: 5-7 days
  
  key_technical_recommendations:
    - Use statistical linearization consistent with existing AqwaRAOs.derive_damping()
    - Extract A_inf from .LIS for primary critical damping calculations
    - Include sensitivity analysis comparing A(ω) vs A_inf methods
    - Parse 'APPROXIMATE PERCENTAGE CRITICAL DAMPING' sections for validation
    - Extract 'H/I DAMPING FOR FORCE ON STR#' for external damping contributions
    - Use Plotly for all visualizations per CLAUDE.md HTML reporting standards
    - Ensure scripts are parameterized for reuse across AQWA projects
    - Validate frequency grid consistency between .DAT and .LIS files
    
steps:
  - id: 1
    description: Create a working copy of all listed .dat and .lis files to a scratch directory under specs/modules/aqwa/ship-analysis to keep source inputs immutable.
  - id: 2
    description: Build a manifest mapping each case id to its vessel, draft condition, and wave heading set using filenames and Deck 0 metadata for traceability. Note that the metadata in deck 0 may not be always updated
  - id: 3
    description: Validate each .dat file for OPTIONS LDRG and note Deck blocks that introduce Morison-style drag elements contributing to additional viscous damping. Most likely Deck 7 has the additional damping - to be checked.
  - id: 4
    description: Parse Deck 1 (element 98000 for CoG validation) along with Deck 6 and Deck 7 of every .dat file to catalogue structural members tagged with drag coefficients, extracting element IDs, reference areas, Cd/Cm values, and associated centroids.
  - id: 5
    description: Use AQWAEnhancedParser (src/digitalmodel/modules/marine_analysis/aqwa_reader.py) to obtain frequency grids and extract the radiation damping B_ij(ω) matrices directly from the .LIS outputs as described in specs/modules/marine-engineering/core-analysis/hydrodynamic-coefficients/README.md.
  - id: 6
    description: Locate the "GEOMETRY       DRAG      ADDED MASS" tables within each .lis file and digitize the drag coefficients associated with the Morison members identified in Step 4.
  - id: 7
    description: Transform drag coefficients to body-fixed axes per structure using geometry data from Deck 5 to isolate surge, sway, and heave contributions, recording lever arms for subsequent moment calculations.
  - id: 8
    description: Compute the induced roll, pitch, and yaw viscous moments by integrating drag forces with lever arms drawn from member centroids relative to the body axes.
  - id: 9
    description: Linearize the Morison drag into equivalent frequency-dependent damping terms using the hydrodynamic-coefficients spec approach (e.g., equivalent linear damping about the displacement RAO amplitudes extracted in Step 5) to retain small-amplitude consistency.
  - id: 10
    description: Combine the linearized viscous terms with radiation damping B_ii(ω) to form total damping curves per DOF and per case.
  - id: 11
    description: Evaluate differences between total and radiation damping to quantify the additional viscous damping applied in the AQWA setup for each frequency, explicitly isolating the heave (B33), roll (B44), and pitch (B55) DOFs.
  - id: 12
    description: Summarize additional damping by extracting characteristic heave, roll, and pitch values (absolute and percentage) at natural frequency peaks for FST1, FST2, and LNGC port/starboard hulls at both drafts, and compute corresponding critical damping ratios using mass/inertia and restoring coefficients per the hydrodynamic-coefficients guidance.
  - id: 13
    description: Cross-check calculated viscous damping against any user-applied linear damping inputs in the deck files to confirm consistency and identify remaining gaps.
  - id: 14
    description: Document findings in a structured table stored alongside this input file, noting whether the available data suffices to answer the viscous damping question for each case.
  - id: 15
    description: Derive absolute damping values and corresponding percentage contributions per DOF, ensuring the viscous-radiation breakdown totals 100% for every configuration and draft, and confirm resulting scripts remain parameterized for reuse on future AQWA datasets and across projects.
  - id: 16
    description: Locate the aqwa simulation agent and marine engineering analysis agent in the repo, then orchestrate them to execute the full damping determination workflow across Steps 1–15 (including critical damping ratio calculations), ensuring all intermediate data products, percentage summaries, and interactive reports are saved under specs/modules/aqwa/ship-analysis/results.
