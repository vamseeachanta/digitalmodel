#!/usr/bin/env python3
"""
Create OrcaWave input configuration from hydrodynamic properties.

This script reads the hydrodynamic.yml file generated by extract_hydrodynamic_properties.py
and creates OrcaWave-specific configuration files for diffraction analysis.
"""

import os
import yaml
from pathlib import Path
from typing import Dict, Any, List


def load_hydrodynamic_properties(yaml_path: str) -> Dict[str, Any]:
    """
    Load hydrodynamic properties from YAML file.
    
    Args:
        yaml_path: Path to the hydrodynamic.yml file
        
    Returns:
        Dictionary containing vessel properties
    """
    with open(yaml_path, 'r') as f:
        return yaml.safe_load(f)


def create_orcawave_vessel_type(config_name: str, config_data: Dict[str, Any], 
                                vessel_dims: Dict[str, Any]) -> Dict[str, Any]:
    """
    Create OrcaWave vessel type definition from configuration data.
    
    Args:
        config_name: Name of the configuration
        config_data: Configuration data including mass, CoG, inertia
        vessel_dims: Vessel dimensions (LBP, beam, depth)
        
    Returns:
        OrcaWave vessel type dictionary
    """
    # Extract properties
    mass = config_data['mass']  # kg
    cog = config_data['cog']  # [x, y, z] in meters
    inertia_matrix = config_data['inertia_matrix']  # 3x3 matrix in kg.m^2
    gyradii = config_data['gyradii']  # [kxx, kyy, kzz] in meters
    draft = config_data['draft']  # meters
    
    # Create OrcaWave vessel type structure
    vessel_type = {
        'VesselType': {
            'Name': f"SeaCypress_{config_name}",
            'Description': config_data['description'],
            
            # Geometry
            'Geometry': {
                'Length': vessel_dims['LBP']['value'],  # m
                'Beam': vessel_dims['beam']['value'],    # m
                'Depth': vessel_dims['depth']['value'],   # m
                'Draft': draft,                           # m
                'GeometryFile': f"geometry/sea_cypress.gdf",  # Will be created by gmsh module
                'SymmetryMode': 'xz plane',  # Port/starboard symmetry
            },
            
            # Mass properties
            'MassProperties': {
                'Mass': mass,  # kg
                'CentreOfGravity': {
                    'X': cog[0],  # m from origin (forward positive)
                    'Y': cog[1],  # m from centerline (port positive)
                    'Z': cog[2],  # m from baseline (up positive)
                },
                'MomentsOfInertia': {
                    'Ixx': inertia_matrix[0][0],  # kg.m^2 (roll)
                    'Iyy': inertia_matrix[1][1],  # kg.m^2 (pitch)
                    'Izz': inertia_matrix[2][2],  # kg.m^2 (yaw)
                    'Ixy': inertia_matrix[0][1],  # kg.m^2 (typically 0)
                    'Ixz': inertia_matrix[0][2],  # kg.m^2 (typically 0)
                    'Iyz': inertia_matrix[1][2],  # kg.m^2 (typically 0)
                },
                'RadiiOfGyration': {
                    'Kxx': gyradii[0],  # m (roll)
                    'Kyy': gyradii[1],  # m (pitch)
                    'Kzz': gyradii[2],  # m (yaw)
                }
            },
            
            # Hydrostatic properties (will be calculated by OrcaWave)
            'Hydrostatics': {
                'CalculateFromGeometry': True,
                'WaterDensity': 1025.0,  # kg/m^3 (seawater)
                'GravitationalAcceleration': 9.81,  # m/s^2
            },
            
            # Reference coordinate system
            'CoordinateSystem': {
                'Origin': {
                    'Description': 'Frame 0 at baseline',
                    'X': 0.0,
                    'Y': 0.0,
                    'Z': 0.0,
                },
                'Orientation': {
                    'Description': 'X forward, Y port, Z up',
                    'Convention': 'ShipBuilding',
                }
            }
        }
    }
    
    return vessel_type


def create_orcawave_analysis_config(vessel_types: List[Dict[str, Any]], 
                                   config_name: str) -> Dict[str, Any]:
    """
    Create OrcaWave analysis configuration.
    
    Args:
        vessel_types: List of vessel type definitions
        config_name: Configuration name
        
    Returns:
        OrcaWave analysis configuration dictionary
    """
    analysis_config = {
        'OrcaWaveAnalysis': {
            'Name': f"SeaCypress_Diffraction_{config_name}",
            'Description': f"Diffraction analysis for Sea Cypress - {config_name}",
            'AnalysisType': 'DiffractionAnalysis',
            
            # Environment settings
            'Environment': {
                'WaterDepth': 100.0,  # m (deep water)
                'WaterDensity': 1025.0,  # kg/m^3
                'CurrentSpeed': 0.0,  # m/s (no current for diffraction)
            },
            
            # Wave frequencies for RAO calculation
            'WaveFrequencies': {
                'Type': 'Range',
                'MinPeriod': 3.0,   # seconds
                'MaxPeriod': 30.0,  # seconds
                'NumberOfPeriods': 50,
                'Distribution': 'Linear',  # or 'Logarithmic'
            },
            
            # Wave headings
            'WaveHeadings': {
                'Type': 'Range',
                'MinHeading': 0.0,    # degrees
                'MaxHeading': 180.0,  # degrees (using symmetry)
                'Increment': 15.0,    # degrees
                'Convention': 'ComingFrom',  # Wave direction convention
            },
            
            # Calculation settings
            'CalculationSettings': {
                'IncludeWaveDrift': True,
                'IncludeAddedMass': True,
                'IncludeDamping': True,
                'IncludeExcitationForces': True,
                'CalculateRAOs': True,
                'FreeSurfaceMethod': 'LinearTheory',
            },
            
            # Output settings
            'OutputSettings': {
                'SaveHydrodynamicDatabase': True,
                'DatabaseFormat': 'OrcaFlex',
                'OutputDirectory': 'outputs/hydrodynamics',
                'RAOFormat': 'Both',  # 'Amplitude/Phase' and 'Real/Imaginary'
                'SaveExcelWorkbook': True,
                'SaveMatFile': False,
            },
            
            # Solver settings
            'SolverSettings': {
                'Method': 'DirectBoundaryElement',
                'PanelIntegrationOrder': 4,
                'RemoveIrregularFrequencies': True,
                'IrregularFrequencyMethod': 'ExtendedBoundaryCondition',
                'ConvergenceTolerance': 1e-6,
                'MaxIterations': 100,
            }
        }
    }
    
    return analysis_config


def create_batch_configuration(hydro_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Create batch configuration for all vessel configurations.
    
    Args:
        hydro_data: Complete hydrodynamic data
        
    Returns:
        Batch configuration dictionary
    """
    vessel_dims = hydro_data['vessel']['dimensions']
    configurations = hydro_data['vessel']['configurations']
    
    batch_config = {
        'BatchAnalysis': {
            'Name': 'SeaCypress_AllConfigurations',
            'Description': 'Batch diffraction analysis for all Sea Cypress configurations',
            'Configurations': []
        }
    }
    
    for config_name, config_data in configurations.items():
        config_entry = {
            'ConfigurationName': config_name,
            'Description': config_data['description'],
            'VesselFile': f"vessel_types/{config_name}.yml",
            'AnalysisFile': f"analyses/{config_name}_analysis.yml",
            'Enabled': True,
            'Priority': 1 if 'incident' in config_name else 2,
        }
        batch_config['BatchAnalysis']['Configurations'].append(config_entry)
    
    return batch_config


def validate_configuration(config: Dict[str, Any]) -> List[str]:
    """
    Validate OrcaWave configuration for completeness and consistency.
    
    Args:
        config: Configuration dictionary
        
    Returns:
        List of validation messages (empty if valid)
    """
    messages = []
    
    # Check vessel type
    if 'VesselType' in config:
        vessel = config['VesselType']
        
        # Check mass properties
        if 'MassProperties' in vessel:
            mass_props = vessel['MassProperties']
            
            # Check mass is positive
            if mass_props.get('Mass', 0) <= 0:
                messages.append("ERROR: Vessel mass must be positive")
            
            # Check inertia values are positive
            moments = mass_props.get('MomentsOfInertia', {})
            if moments.get('Ixx', 0) <= 0:
                messages.append("ERROR: Ixx must be positive")
            if moments.get('Iyy', 0) <= 0:
                messages.append("ERROR: Iyy must be positive")
            if moments.get('Izz', 0) <= 0:
                messages.append("ERROR: Izz must be positive")
            
            # Check gyradii are positive
            gyradii = mass_props.get('RadiiOfGyration', {})
            if gyradii.get('Kxx', 0) <= 0:
                messages.append("ERROR: Kxx must be positive")
            if gyradii.get('Kyy', 0) <= 0:
                messages.append("ERROR: Kyy must be positive")
            if gyradii.get('Kzz', 0) <= 0:
                messages.append("ERROR: Kzz must be positive")
        
        # Check geometry
        if 'Geometry' in vessel:
            geom = vessel['Geometry']
            
            # Check dimensions are positive
            if geom.get('Length', 0) <= 0:
                messages.append("ERROR: Length must be positive")
            if geom.get('Beam', 0) <= 0:
                messages.append("ERROR: Beam must be positive")
            if geom.get('Draft', 0) <= 0:
                messages.append("ERROR: Draft must be positive")
            
            # Check draft is less than depth
            if geom.get('Draft', 0) >= geom.get('Depth', float('inf')):
                messages.append("WARNING: Draft should be less than depth")
    
    # Check analysis configuration
    if 'OrcaWaveAnalysis' in config:
        analysis = config['OrcaWaveAnalysis']
        
        # Check wave frequencies
        if 'WaveFrequencies' in analysis:
            freqs = analysis['WaveFrequencies']
            if freqs.get('MinPeriod', 0) <= 0:
                messages.append("ERROR: MinPeriod must be positive")
            if freqs.get('MaxPeriod', 0) <= freqs.get('MinPeriod', 0):
                messages.append("ERROR: MaxPeriod must be greater than MinPeriod")
        
        # Check wave headings
        if 'WaveHeadings' in analysis:
            headings = analysis['WaveHeadings']
            if headings.get('Increment', 0) <= 0:
                messages.append("ERROR: Heading increment must be positive")
    
    return messages


def main():
    """Main execution function."""
    # Set up paths
    script_dir = Path(__file__).parent
    input_file = script_dir.parent / 'outputs' / 'hydrodynamic.yml'
    output_dir = script_dir.parent / 'outputs' / 'orcawave_configs'
    
    # Create output directories
    output_dir.mkdir(exist_ok=True)
    (output_dir / 'vessel_types').mkdir(exist_ok=True)
    (output_dir / 'analyses').mkdir(exist_ok=True)
    
    print(f"Reading hydrodynamic properties from: {input_file}")
    
    # Load hydrodynamic properties
    hydro_data = load_hydrodynamic_properties(str(input_file))
    
    # Get vessel dimensions and configurations
    vessel_dims = hydro_data['vessel']['dimensions']
    configurations = hydro_data['vessel']['configurations']
    
    print(f"Found {len(configurations)} vessel configurations")
    
    # Process each configuration
    all_vessel_types = []
    validation_report = []
    
    for config_name, config_data in configurations.items():
        print(f"\nProcessing configuration: {config_name}")
        
        # Create vessel type
        vessel_type = create_orcawave_vessel_type(config_name, config_data, vessel_dims)
        all_vessel_types.append(vessel_type)
        
        # Validate vessel type
        vessel_messages = validate_configuration(vessel_type)
        if vessel_messages:
            validation_report.extend([f"{config_name}: {msg}" for msg in vessel_messages])
        
        # Save vessel type
        vessel_file = output_dir / 'vessel_types' / f"{config_name}.yml"
        with open(vessel_file, 'w') as f:
            yaml.dump(vessel_type, f, default_flow_style=False, sort_keys=False)
        print(f"  Created vessel type: {vessel_file}")
        
        # Create analysis configuration
        analysis_config = create_orcawave_analysis_config([vessel_type], config_name)
        
        # Validate analysis configuration
        analysis_messages = validate_configuration(analysis_config)
        if analysis_messages:
            validation_report.extend([f"{config_name} analysis: {msg}" for msg in analysis_messages])
        
        # Save analysis configuration
        analysis_file = output_dir / 'analyses' / f"{config_name}_analysis.yml"
        with open(analysis_file, 'w') as f:
            yaml.dump(analysis_config, f, default_flow_style=False, sort_keys=False)
        print(f"  Created analysis config: {analysis_file}")
    
    # Create batch configuration
    batch_config = create_batch_configuration(hydro_data)
    batch_file = output_dir / 'batch_analysis.yml'
    with open(batch_file, 'w') as f:
        yaml.dump(batch_config, f, default_flow_style=False, sort_keys=False)
    print(f"\nCreated batch configuration: {batch_file}")
    
    # Create master configuration
    master_config = {
        'OrcaWaveMasterConfiguration': {
            'Name': 'SeaCypress_DiffractionAnalysis',
            'Description': 'Complete diffraction analysis configuration for Sea Cypress',
            'VesselTypes': [f"vessel_types/{name}.yml" for name in configurations.keys()],
            'Analyses': [f"analyses/{name}_analysis.yml" for name in configurations.keys()],
            'BatchConfiguration': 'batch_analysis.yml',
            'GeometrySource': 'gmsh module output',
        }
    }
    
    master_file = output_dir / 'master_config.yml'
    with open(master_file, 'w') as f:
        yaml.dump(master_config, f, default_flow_style=False, sort_keys=False)
    print(f"Created master configuration: {master_file}")
    
    # Print validation report
    print("\n=== Validation Report ===")
    if validation_report:
        print("Issues found:")
        for msg in validation_report:
            print(f"  {msg}")
    else:
        print("All configurations validated successfully!")
    
    # Print summary
    print("\n=== Configuration Summary ===")
    print(f"Created {len(configurations)} vessel type definitions")
    print(f"Created {len(configurations)} analysis configurations")
    print("Created 1 batch configuration")
    print("Created 1 master configuration")
    print(f"\nAll files saved to: {output_dir}")


if __name__ == "__main__":
    main()