# Generic MCP Server Configuration Example
# This file demonstrates all available configuration options
# Copy and modify for your specific GUI application

server:
  name: "my-app-mcp-server"
  version: "1.0.0"
  host: "localhost"
  port: 3000
  workers: 4
  ssl_enabled: false
  # ssl_cert: "/path/to/cert.pem"
  # ssl_key: "/path/to/key.pem"

security:
  enable_sandboxing: true
  enable_rate_limiting: true
  max_requests_per_minute: 100
  enable_audit_logging: true
  allowed_origins:
    - "http://localhost:*"
    - "https://claude.ai"
  require_auth: false

cache:
  l1_size: 1000  # In-memory cache entries
  l2_redis_url: "redis://localhost:6379"
  l3_cdn_provider: null  # Options: "cloudflare", "fastly", null
  default_ttl: 60  # seconds

vision:
  provider: "gpt4"  # Options: "gpt4", "claude", "local", "ollama"
  api_key: "${OPENAI_API_KEY}"  # Use environment variable
  model: "gpt-4-vision-preview"
  max_tokens: 1000
  temperature: 0.3
  confidence_threshold: 0.8

program:
  name: "Example Application"
  executable: "C:/Program Files/ExampleApp/app.exe"
  window_title: "Example App - Main Window"
  capture_mode: "window"  # Options: "full_screen", "window", "region"
  shortcuts:
    new_file: "ctrl+n"
    open_file: "ctrl+o"
    save_file: "ctrl+s"
    quit: "alt+f4"
    copy: "ctrl+c"
    paste: "ctrl+v"
    undo: "ctrl+z"
    redo: "ctrl+y"
    find: "ctrl+f"
    replace: "ctrl+h"

# Environment-specific overrides
environments:
  development:
    server:
      host: "127.0.0.1"
      port: 3001
    security:
      enable_sandboxing: false
      require_auth: false
    cache:
      default_ttl: 10
    vision:
      provider: "local"  # Use local vision for dev
      
  staging:
    server:
      port: 3002
    security:
      require_auth: true
    cache:
      default_ttl: 30
      
  production:
    server:
      ssl_enabled: true
      ssl_cert: "/etc/ssl/certs/mcp.crt"
      ssl_key: "/etc/ssl/private/mcp.key"
    security:
      enable_sandboxing: true
      require_auth: true
      max_requests_per_minute: 1000
    cache:
      l3_cdn_provider: "cloudflare"
      default_ttl: 300
    vision:
      confidence_threshold: 0.95

# Agent delegation configuration
agents:
  registry_url: "http://localhost:4000/agents"
  delegations:
    - pattern: "analyze.*"
      agent: "vision-analysis-agent"
    - pattern: "test.*"
      agent: "testing-agent"
    - pattern: "document.*"
      agent: "documentation-agent"

# Monitoring and observability
monitoring:
  enable_tracing: true
  enable_metrics: true
  enable_logging: true
  tracing:
    endpoint: "http://localhost:4317"  # OpenTelemetry collector
    sample_rate: 0.1  # 10% sampling in production
  metrics:
    endpoint: "http://localhost:9090"  # Prometheus
    interval: 60  # seconds
  logging:
    level: "INFO"  # DEBUG, INFO, WARNING, ERROR
    format: "json"
    output: "stdout"  # stdout, file, syslog
    # file_path: "/var/log/mcp-server.log"

# Performance tuning
performance:
  max_concurrent_requests: 100
  request_timeout: 30000  # milliseconds
  screenshot_compression:
    enabled: true
    format: "webp"  # png, jpeg, webp
    quality: 85  # 1-100
  batch_operations:
    enabled: true
    max_batch_size: 10
    batch_timeout: 1000  # milliseconds
  gpu_acceleration:
    enabled: false
    device: "cuda:0"  # cuda:0, opencl:0, metal:0

# Testing configuration
testing:
  mock_mode: false
  test_data_dir: "./test_data"
  fixtures_dir: "./fixtures"
  coverage:
    enabled: true
    min_coverage: 80  # percentage

# Feature flags
features:
  enable_self_healing: true
  enable_accessibility_mode: true
  enable_predictive_caching: false
  enable_ml_optimization: false
  enable_collaborative_mode: false

# Custom extensions
extensions:
  plugins_dir: "./plugins"
  enabled_plugins:
    - "custom_vision_processor"
    - "advanced_element_detector"
  plugin_config:
    custom_vision_processor:
      model_path: "./models/custom_vision.onnx"
    advanced_element_detector:
      sensitivity: 0.9