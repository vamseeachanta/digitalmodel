name: Automated Release & Deployment

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'
          - 'prerelease'
      skip_tests:
        description: 'Skip test suite'
        required: false
        default: false
        type: boolean
      deploy_environment:
        description: 'Deployment environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - 'staging'
          - 'production'
          - 'both'

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Determine if this should be a release
  check-release-conditions:
    name: Check Release Conditions
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      release-type: ${{ steps.check.outputs.release-type }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if release is needed
        id: check
        run: |
          should_release="false"
          release_type="${{ github.event.inputs.release_type || 'patch' }}"

          # Manual dispatch always creates release
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            should_release="true"
          fi

          # Check for conventional commit messages that trigger releases
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Get commits since last tag
            last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

            if [[ -z "$last_tag" ]]; then
              # No previous tags, create initial release
              should_release="true"
              release_type="minor"
            else
              # Check commit messages since last tag
              commits=$(git log ${last_tag}..HEAD --oneline)

              if echo "$commits" | grep -qE '^[a-f0-9]+ (feat|feature)(\(.+\))?!:'; then
                release_type="major"
                should_release="true"
              elif echo "$commits" | grep -qE '^[a-f0-9]+ (feat|feature)(\(.+\))?:'; then
                release_type="minor"
                should_release="true"
              elif echo "$commits" | grep -qE '^[a-f0-9]+ (fix|bugfix|patch)(\(.+\))?:'; then
                release_type="patch"
                should_release="true"
              elif echo "$commits" | grep -qE '^[a-f0-9]+ (perf|performance)(\(.+\))?:'; then
                release_type="patch"
                should_release="true"
              fi
            fi
          fi

          # Calculate next version
          current_version=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "0.0.0")

          IFS='.' read -ra VERSION_PARTS <<< "$current_version"
          major=${VERSION_PARTS[0]:-0}
          minor=${VERSION_PARTS[1]:-0}
          patch=${VERSION_PARTS[2]:-0}

          case "$release_type" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
            prerelease)
              patch=$((patch + 1))
              prerelease="-rc.$(date +%Y%m%d%H%M)"
              ;;
          esac

          new_version="${major}.${minor}.${patch}${prerelease:-}"

          echo "should-release=$should_release" >> $GITHUB_OUTPUT
          echo "release-type=$release_type" >> $GITHUB_OUTPUT
          echo "version=$new_version" >> $GITHUB_OUTPUT

          echo "Release check: should_release=$should_release, type=$release_type, version=$new_version"

  # Run comprehensive tests before release
  pre-release-tests:
    name: Pre-Release Test Suite
    runs-on: ubuntu-latest
    needs: check-release-conditions
    if: needs.check-release-conditions.outputs.should-release == 'true' && github.event.inputs.skip_tests != 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --frozen

      - name: Run comprehensive test suite
        run: |
          # Run full test suite with coverage
          uv run pytest \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=85 \
            --junitxml=test-results.xml \
            --durations=10 \
            tests/

      - name: Run integration tests
        run: |
          # Run integration tests
          uv run pytest \
            -m "integration" \
            --tb=short \
            tests/ || echo "Integration tests completed with warnings"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pre-release-test-results
          path: |
            test-results.xml
            htmlcov/
            coverage.xml

  # Build and package
  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [check-release-conditions, pre-release-tests]
    if: always() && needs.check-release-conditions.outputs.should-release == 'true' && (needs.pre-release-tests.result == 'success' || needs.pre-release-tests.result == 'skipped')
    outputs:
      package-version: ${{ steps.build.outputs.version }}
      wheel-name: ${{ steps.build.outputs.wheel-name }}
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Update version
        id: update-version
        run: |
          new_version="${{ needs.check-release-conditions.outputs.version }}"

          # Update version in pyproject.toml
          sed -i "s/^version = .*/version = \"$new_version\"/" pyproject.toml

          # Verify version was updated
          if grep -q "version = \"$new_version\"" pyproject.toml; then
            echo "Version updated to $new_version"
            echo "version=$new_version" >> $GITHUB_OUTPUT
          else
            echo "Failed to update version"
            exit 1
          fi

      - name: Build package
        id: build
        run: |
          # Build wheel and source distribution
          uv build

          # Get the built wheel name
          wheel_name=$(ls dist/*.whl | head -1 | xargs basename)
          echo "wheel-name=$wheel_name" >> $GITHUB_OUTPUT
          echo "version=${{ steps.update-version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Verify package
        run: |
          # Install and verify the built package
          uv pip install dist/*.whl

          # Test import
          python -c "import digitalmodel; print(f'Successfully imported digitalmodel')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: |
            dist/
            pyproject.toml

  # Build container image
  build-container:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: [check-release-conditions, build-package]
    if: always() && needs.check-release-conditions.outputs.should-release == 'true' && needs.build-package.result == 'success'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create optimized Dockerfile
        run: |
          cat > Dockerfile.release << 'EOF'
          # Multi-stage build for optimized production image
          FROM python:3.11-slim as builder

          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              build-essential \
              curl \
              && rm -rf /var/lib/apt/lists/*

          # Install uv
          RUN pip install uv

          # Set working directory
          WORKDIR /app

          # Copy package files
          COPY dist/ ./dist/
          COPY pyproject.toml ./

          # Install the package
          RUN uv pip install --system dist/*.whl

          # Production stage
          FROM python:3.11-slim as production

          # Install runtime dependencies
          RUN apt-get update && apt-get install -y \
              libhdf5-dev \
              libnetcdf-dev \
              && rm -rf /var/lib/apt/lists/*

          # Create non-root user
          RUN useradd --create-home --shell /bin/bash digitalmodel

          # Copy installed packages from builder
          COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
          COPY --from=builder /usr/local/bin /usr/local/bin

          # Set working directory
          WORKDIR /app

          # Change to non-root user
          USER digitalmodel

          # Health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
            CMD python -c "import digitalmodel; print('OK')" || exit 1

          # Default command
          CMD ["python", "-m", "digitalmodel"]
          EOF

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.release
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.check-release-conditions.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-release-conditions, build-package, build-container]
    if: always() && needs.check-release-conditions.outputs.should-release == 'true' && needs.build-package.result == 'success'
    permissions:
      contents: write
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Generate changelog
        run: |
          version="v${{ needs.check-release-conditions.outputs.version }}"

          # Get the last tag
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          echo "# Release $version" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          if [[ -n "$last_tag" ]]; then
            echo "## Changes since $last_tag" >> CHANGELOG.md
            echo "" >> CHANGELOG.md

            # Generate changelog from commit messages
            git log ${last_tag}..HEAD --pretty=format:"- %s (%h)" \
              --no-merges \
              | head -50 >> CHANGELOG.md
          else
            echo "## Initial Release" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is the initial release of digitalmodel." >> CHANGELOG.md
          fi

          echo "" >> CHANGELOG.md
          echo "## Package Information" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- **Version:** $version" >> CHANGELOG.md
          echo "- **Python Compatibility:** 3.9+" >> CHANGELOG.md
          echo "- **Build Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> CHANGELOG.md
          echo "- **Commit:** ${{ github.sha }}" >> CHANGELOG.md

          # Add container image info if available
          if [[ "${{ needs.build-container.result }}" == "success" ]]; then
            echo "" >> CHANGELOG.md
            echo "## Container Image" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "```bash" >> CHANGELOG.md
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$version" >> CHANGELOG.md
            echo "```" >> CHANGELOG.md
          fi

      - name: Create Git tag
        run: |
          version="v${{ needs.check-release-conditions.outputs.version }}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -a "$version" -m "Release $version"
          git push origin "$version"

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-release-conditions.outputs.version }}
          release_name: digitalmodel v${{ needs.check-release-conditions.outputs.version }}
          body_path: ./CHANGELOG.md
          draft: false
          prerelease: ${{ contains(needs.check-release-conditions.outputs.version, 'rc') }}

      - name: Upload wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/${{ needs.build-package.outputs.wheel-name }}
          asset_name: ${{ needs.build-package.outputs.wheel-name }}
          asset_content_type: application/zip

      - name: Upload source distribution to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/digitalmodel-${{ needs.check-release-conditions.outputs.version }}.tar.gz
          asset_name: digitalmodel-${{ needs.check-release-conditions.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [check-release-conditions, create-release]
    if: always() && needs.create-release.result == 'success' && (github.event.inputs.deploy_environment == 'staging' || github.event.inputs.deploy_environment == 'both' || github.event.inputs.deploy_environment == '')
    environment:
      name: staging
      url: https://staging-digitalmodel.company.com
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying digitalmodel v${{ needs.check-release-conditions.outputs.version }} to staging..."

          # In a real deployment, this would:
          # 1. Connect to staging infrastructure
          # 2. Pull the new container image
          # 3. Update the deployment
          # 4. Run health checks
          # 5. Verify deployment success

          echo "Staging deployment configuration:"
          echo "- Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.check-release-conditions.outputs.version }}"
          echo "- Environment: staging"
          echo "- Health check endpoint: /health"

          # Simulate deployment
          sleep 10
          echo "Staging deployment completed successfully"

      - name: Run staging smoke tests
        run: |
          echo "Running smoke tests on staging environment..."

          # In a real implementation, run smoke tests against staging
          # curl -f https://staging-digitalmodel.company.com/health
          # python tests/smoke/test_staging.py

          echo "Staging smoke tests passed"

      - name: Update staging deployment status
        run: |
          echo "staging-deployment-success=true" >> $GITHUB_OUTPUT

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [check-release-conditions, create-release, deploy-staging]
    if: always() && needs.create-release.result == 'success' && (github.event.inputs.deploy_environment == 'production' || github.event.inputs.deploy_environment == 'both') && needs.deploy-staging.result == 'success'
    environment:
      name: production
      url: https://digitalmodel.company.com
    steps:
      - uses: actions/checkout@v4

      - name: Production deployment approval
        uses: actions/github-script@v7
        with:
          script: |
            // In a real scenario, this could integrate with approval systems
            console.log('Production deployment approved for version ${{ needs.check-release-conditions.outputs.version }}');

      - name: Deploy to production environment
        run: |
          echo "Deploying digitalmodel v${{ needs.check-release-conditions.outputs.version }} to production..."

          # Production deployment steps:
          # 1. Create backup of current deployment
          # 2. Blue-green deployment or rolling update
          # 3. Update load balancer configuration
          # 4. Run comprehensive health checks
          # 5. Monitor metrics and logs

          echo "Production deployment configuration:"
          echo "- Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.check-release-conditions.outputs.version }}"
          echo "- Environment: production"
          echo "- Deployment strategy: blue-green"
          echo "- Health check endpoint: /health"

          # Simulate production deployment
          sleep 20
          echo "Production deployment completed successfully"

      - name: Run production health checks
        run: |
          echo "Running production health checks..."

          # In a real implementation:
          # - Check application health endpoints
          # - Verify database connectivity
          # - Check external service integrations
          # - Monitor error rates and performance metrics

          echo "Production health checks passed"

      - name: Update production monitoring
        run: |
          echo "Updating production monitoring and alerting..."

          # Update monitoring dashboards with new version
          # Configure alerts for the new deployment
          # Set up performance baselines

          echo "Production monitoring updated for v${{ needs.check-release-conditions.outputs.version }}"

  # Post-release notifications and cleanup
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [check-release-conditions, create-release, deploy-staging, deploy-production]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Send release notifications
        run: |
          echo "Sending release notifications..."

          version="v${{ needs.check-release-conditions.outputs.version }}"

          # In a real implementation, send notifications to:
          # - Slack/Discord channels
          # - Email distribution lists
          # - Project management tools
          # - Documentation updates

          echo "Release $version notifications sent successfully"

      - name: Update documentation
        run: |
          echo "Updating documentation for release $version..."

          # Trigger documentation updates:
          # - API documentation regeneration
          # - Release notes publication
          # - Version compatibility matrices
          # - Installation guide updates

          echo "Documentation updated successfully"

      - name: Archive release artifacts
        run: |
          echo "Archiving release artifacts..."

          # Archive build artifacts, logs, and metrics
          # for compliance and debugging purposes

          echo "Release artifacts archived successfully"

      - name: Performance baseline update
        run: |
          echo "Updating performance baselines..."

          # Update performance benchmarks with new baseline
          # from the released version for future regression testing

          echo "Performance baselines updated"

  # Rollback mechanism
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment:
      name: production
    steps:
      - name: Emergency rollback procedure
        run: |
          echo "Initiating emergency rollback procedure..."

          # Emergency rollback steps:
          # 1. Identify last known good version
          # 2. Restore previous container image
          # 3. Update load balancer configuration
          # 4. Verify rollback success
          # 5. Create incident report

          echo "Emergency rollback completed"
          echo "Creating incident report..."

      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Emergency Rollback - Release v${{ needs.check-release-conditions.outputs.version }}',
              body: `
              ## Emergency Rollback Executed

              **Failed Release:** v${{ needs.check-release-conditions.outputs.version }}
              **Rollback Time:** ${new Date().toISOString()}
              **Trigger:** Production deployment failure

              ### Actions Taken
              - Emergency rollback to previous stable version
              - Production traffic restored
              - Incident response initiated

              ### Next Steps
              - [ ] Investigate root cause of deployment failure
              - [ ] Fix identified issues
              - [ ] Test fix in staging environment
              - [ ] Plan next release

              **Priority:** Critical
              **Assignee:** Release team
              `,
              labels: ['critical', 'rollback', 'production', 'incident']
            });