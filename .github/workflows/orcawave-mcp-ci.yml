name: OrcaWave MCP CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/mcp/orcawave/**'
      - 'mcp/orcawave/**'
      - 'specs/modules/mcp-server/orcawave-mcp/**'
      - '.github/workflows/orcawave-mcp-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/mcp/orcawave/**'
      - 'mcp/orcawave/**'
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production'
        required: false
        default: 'false'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort mypy pylint
    
    - name: Run Ruff
      run: ruff check src/mcp/orcawave/
    
    - name: Check formatting with Black
      run: black --check src/mcp/orcawave/
    
    - name: Check import sorting
      run: isort --check-only src/mcp/orcawave/
    
    - name: Type checking with mypy
      run: mypy src/mcp/orcawave/ --ignore-missing-imports
      continue-on-error: true

  test-unit:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        pip install pyyaml aiohttp websockets
    
    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: pip install pywin32
    
    - name: Run unit tests
      run: |
        pytest src/mcp/orcawave/tests/ \
          --cov=src.mcp.orcawave \
          --cov-report=xml \
          --cov-report=term \
          -v
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-${{ matrix.python-version }}

  test-integration:
    name: Integration Tests
    runs-on: windows-latest
    needs: [lint, test-unit]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Run integration tests
      run: |
        python src/mcp/orcawave/tests/test_integration.py
        python src/mcp/orcawave/tests/test_end_to_end.py
      continue-on-error: true

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test-unit]
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./src/mcp/orcawave/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/orcawave-mcp:latest
          ghcr.io/${{ github.repository }}/orcawave-mcp:${{ github.sha }}
        cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/orcawave-mcp:buildcache
        cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/orcawave-mcp:buildcache,mode=max

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy security scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'src/mcp/orcawave'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r src/mcp/orcawave/ -f json -o bandit-results.json
      continue-on-error: true

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test-unit]
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install locust pytest-benchmark memory_profiler
    
    - name: Run performance tests
      run: |
        python -m pytest src/mcp/orcawave/tests/ \
          --benchmark-only \
          --benchmark-autosave
      continue-on-error: true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: .benchmarks/

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [test-unit]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation tools
      run: |
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
    
    - name: Generate API documentation
      run: |
        sphinx-apidoc -o docs/api src/mcp/orcawave
        cd docs && make html
      continue-on-error: true
    
    - name: Build MkDocs site
      run: |
        mkdocs build --config-file src/mcp/orcawave/mkdocs.yml
      continue-on-error: true
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          docs/_build/html
          site/

  deploy-staging:
    name: Deploy to Staging
    runs-on: windows-latest
    needs: [test-integration, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.orcawave-mcp.company.com
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging server
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here
      env:
        STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
        STAGING_KEY: ${{ secrets.STAGING_KEY }}

  deploy-production:
    name: Deploy to Production
    runs-on: windows-latest
    needs: [test-integration, security-scan, performance-test]
    if: github.ref == 'refs/heads/main' && github.event.inputs.deploy == 'true'
    environment:
      name: production
      url: https://orcawave-mcp.company.com
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Backup current deployment
      run: |
        echo "Creating backup of current deployment..."
        # Add backup commands
    
    - name: Deploy to production server
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment commands here
      env:
        PROD_SERVER: ${{ secrets.PROD_SERVER }}
        PROD_KEY: ${{ secrets.PROD_KEY }}
    
    - name: Run smoke tests
      run: |
        echo "Running post-deployment smoke tests..."
        # Add smoke test commands
    
    - name: Notify team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'OrcaWave MCP deployed to production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event.inputs.deploy == 'true'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Generate changelog
      run: |
        echo "## Changes in this release" > CHANGELOG.md
        git log --oneline --no-merges $(git describe --tags --abbrev=0)..HEAD >> CHANGELOG.md
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: OrcaWave MCP Release v${{ github.run_number }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false