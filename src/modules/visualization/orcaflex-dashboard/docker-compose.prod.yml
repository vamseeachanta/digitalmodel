version: '3.8'

services:
  # Backend API - Production
  backend:
    build: 
      context: ./backend
      target: production
    ports:
      - "8000:8000"
    environment:
      - ORCAFLEX_ENVIRONMENT=production
      - ORCAFLEX_DEBUG=false
      - ORCAFLEX_DATABASE_URL=${DATABASE_URL}
      - ORCAFLEX_REDIS_URL=${REDIS_URL}
      - ORCAFLEX_SECRET_KEY=${SECRET_KEY}
      - ORCAFLEX_CORS_ORIGINS=${CORS_ORIGINS}
      - ORCAFLEX_ALLOWED_HOSTS=${ALLOWED_HOSTS}
    volumes:
      - uploads_data:/app/uploads
      - results_data:/app/results
      - logs_data:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - orcaflex-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Frontend - Production
  frontend:
    build:
      context: ./frontend
      target: runner
      args:
        - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL}
    depends_on:
      - backend
    networks:
      - orcaflex-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # PostgreSQL Database - Production
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    networks:
      - orcaflex-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    command: >
      postgres 
      -c max_connections=200 
      -c shared_buffers=256MB 
      -c effective_cache_size=1GB 
      -c maintenance_work_mem=64MB 
      -c checkpoint_completion_target=0.9 
      -c wal_buffers=16MB 
      -c default_statistics_target=100

  # Redis Cache - Production
  redis:
    image: redis:7-alpine
    command: >
      redis-server 
      --maxmemory 1gb 
      --maxmemory-policy allkeys-lru 
      --appendonly yes 
      --save 900 1 
      --save 300 10 
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - orcaflex-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Nginx Load Balancer/Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_files:/var/www/static:ro
    depends_on:
      - frontend
      - backend
    networks:
      - orcaflex-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - orcaflex-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - orcaflex-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  results_data:
    driver: local
  logs_data:
    driver: local
  static_files:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  orcaflex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16