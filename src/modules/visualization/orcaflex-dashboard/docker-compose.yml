version: '3.8'

services:
  # Backend API
  backend:
    build: 
      context: ./backend
      target: development
    ports:
      - "8000:8000"
    environment:
      - ORCAFLEX_ENVIRONMENT=development
      - ORCAFLEX_DEBUG=true
      - ORCAFLEX_DATABASE_URL=postgresql://orcaflex:password@postgres:5432/orcaflex_dashboard
      - ORCAFLEX_REDIS_URL=redis://redis:6379/0
      - ORCAFLEX_CORS_ORIGINS=http://localhost:3000,http://localhost:3001
    volumes:
      - ./backend:/app
      - uploads_data:/app/uploads
      - results_data:/app/results
    depends_on:
      - postgres
      - redis
    networks:
      - orcaflex-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      target: runner
      args:
        - NEXT_PUBLIC_API_BASE_URL=http://localhost:8000
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_BASE_URL=http://backend:8000
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - orcaflex-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=orcaflex_dashboard
      - POSTGRES_USER=orcaflex
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - orcaflex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orcaflex -d orcaflex_dashboard"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - orcaflex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional for development)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - orcaflex-network
    restart: unless-stopped
    profiles:
      - proxy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  results_data:
    driver: local

networks:
  orcaflex-network:
    driver: bridge