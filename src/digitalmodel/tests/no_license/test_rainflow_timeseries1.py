import pytest
import deepdiff
import os
import sys
import numpy as np


from digitalmodel.common.basic_statistics import BasicStatistics
from digitalmodel.common.time_series_analysis import TimeSeriesAnalysis

tsa = TimeSeriesAnalysis()
bs = BasicStatistics()


def run_rainflow_for_timeseries(timeseries_data, expected_result={}):
    df, dict = tsa.get_rainflow_count_from_time_series(timeseries_data)

    half_cycle_result = []
    for i in range(len(df)):
        half_cycle_result = half_cycle_result + [df["range"][i]] * int(
            df["count"][i] / 0.5
        )

    cfg_hist = {"bins": 10, "bin_range": (0, 2000)}

    rainflow_hist = bs.get_histograms(half_cycle_result, cfg_hist)

    # Convert half cycles to full cycles
    rainflow_hist["frequency"] = rainflow_hist["frequency"] / 2

    result = {
        "half_cycles": half_cycle_result,
        "histogram": list(rainflow_hist["frequency"]),
    }

    half_cycles_diff = deepdiff.DeepDiff(
        result["half_cycles"], expected_result["half_cycles"], ignore_order=True
    )
    histogram_diff = deepdiff.DeepDiff(
        result["histogram"], expected_result["histogram"], ignore_order=True
    )

    assert histogram_diff["values_changed"]["root[0]"] == {
        "new_value": 8.0,
        "old_value": 8.5,
    }

    return df


def test_rainflow_for_timeseries():
    timeseries_data = [
        125522.09174021,
        125522.08992211,
        125522.06542729,
        125521.96068642,
        125521.83798927,
        125522.5387468,
        125525.62659825,
        125529.84503893,
        125528.2272313,
        125517.87142984,
        125509.08012545,
        125511.81498439,
        125521.90007649,
        125529.24944198,
        125524.00730286,
        125497.16817219,
        125461.20091836,
        125457.06685898,
        125504.50330465,
        125577.77476133,
        125643.01630825,
        125666.7798899,
        125620.3393382,
        125523.81849311,
        125450.20484076,
        125448.35140911,
        125470.32805242,
        125442.35984485,
        125400.14015529,
        125438.91515176,
        125580.18003137,
        125714.8212742,
        125668.67376278,
        125452.40269081,
        125315.69642819,
        125384.06855682,
        125497.10181663,
        125520.86003267,
        125524.95329979,
        125614.08797349,
        125774.9981955,
        125840.98478359,
        125684.00867192,
        125457.59001386,
        125354.27152337,
        125323.5058826,
        125301.25773854,
        125333.63179472,
        125406.02444074,
        125487.4281683,
        125574.88191882,
        125580.83997905,
        125517.69212197,
        125590.36283045,
        125745.83315294,
        125736.45244099,
        125674.698139,
        125680.04488355,
        125566.38664046,
        125349.52862298,
        125241.76190416,
        125238.53273833,
        125272.74499561,
        125370.32604092,
        125524.59953958,
        125709.31743068,
        125886.90684474,
        125924.16720971,
        125718.80140022,
        125418.79038119,
        125259.32867038,
        125230.32535841,
        125217.31027797,
        125274.61134848,
        125451.98627865,
        125674.48096181,
        125842.43355619,
        125889.73240069,
        125806.43950931,
        125653.3480543,
        125492.21674577,
        125374.32968697,
        125333.67151145,
        125353.22298656,
        125408.26026722,
        125461.44283622,
        125443.54945831,
        125364.96646579,
        125338.03659045,
        125415.30079089,
        125578.26253804,
        125796.47410647,
        125885.67675031,
        125721.24801684,
        125523.16650246,
        125479.39635054,
        125536.98641083,
        125591.33048112,
        125566.27650238,
        125489.40103602,
        125433.14265665,
        125400.12395342,
        125377.0798337,
        125359.95360883,
        125361.52852552,
        125416.21227831,
        125502.51557467,
        125525.44589011,
        125491.29819144,
        125591.27351288,
        125864.24465537,
        126008.77941407,
        125812.49931434,
        125457.25460671,
        125240.83218148,
        125200.49488678,
        125214.81235028,
        125315.22680965,
        125593.1891769,
        125835.3877197,
        125744.79392052,
        125482.80450459,
        125384.30616062,
        125410.31990303,
        125430.27580729,
        125544.03122109,
        125746.97466323,
        125783.80567502,
        125620.91613844,
        125485.14073796,
        125377.4108206,
        125205.09319232,
        125083.24589827,
        125187.33212899,
        125569.18802573,
        125995.85751069,
        126066.33649994,
        125779.03009751,
        125526.75818968,
        125447.95408706,
        125410.00929715,
    ]

    orcaflex_rainflow_half_cycles_result = [
        5.34674455,
        5.34674455,
        8.00704967,
        20.16931653,
        20.16931653,
        21.97664332,
        21.97664332,
        34.14769867,
        34.14769867,
        63.14785708,
        63.14785708,
        72.77817995,
        111.93413058,
        111.93413058,
        123.40624577,
        123.40624577,
        209.71303091,
        266.6397346,
        314.6811189,
        399.12484601,
        399.4995144,
        399.4995144,
        444.5754144,
        444.5754144,
        525.28835541,
        525.72314148,
        525.72314148,
        556.06088924,
        556.06088924,
        602.45204527,
        634.89283293,
        634.89283293,
        685.63447138,
        706.85693173,
        791.4691361,
        925.5335158,
        983.09060167,
    ]
    cfg_hist = {"bins": 10, "bin_range": (0, 2000)}
    orcaflex_rainflow_hist = bs.get_histograms(
        orcaflex_rainflow_half_cycles_result, cfg_hist
    )

    # Convert half cycles to full cycles
    orcaflex_rainflow_hist["frequency"] = orcaflex_rainflow_hist["frequency"] / 2

    expected_result = {
        "half_cycles": orcaflex_rainflow_half_cycles_result,
        "histogram": list(orcaflex_rainflow_hist["frequency"]),
    }

    df = run_rainflow_for_timeseries(timeseries_data, expected_result)


test_rainflow_for_timeseries()
