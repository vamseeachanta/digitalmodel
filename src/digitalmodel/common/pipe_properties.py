# Standard library imports
import math

# Third party imports
from assetutilities.common.yml_utilities import WorkingWithYAML, ymlInput

wwy = WorkingWithYAML()

class PipeProperties:
    def __init__(self) -> None:
        pass
    
    def get_properties(self, pipe_system):
        pipe_properties = []
        for pipe_cfg in pipe_system:
            pipe_properties.append(self.pipe_properties(pipe_cfg))

        system_properties = self.get_system_properties(pipe_properties)
        return pipe_properties, system_properties
    
    def get_system_properties(self, pipe_properties):
        #TODO - Method generated by AI. QA pending
        system_properties = {}
        system_properties['mass'] = sum([pipe['equivalent']['mass']['air']['without_internal_fluid'] for pipe in pipe_properties])
        system_properties['EI'] = sum([pipe['equivalent']['EI'] for pipe in pipe_properties])
        system_properties['EA'] = sum([pipe['equivalent']['EA'] for pipe in pipe_properties])
        system_properties['GJ'] = sum([pipe['equivalent']['GJ'] for pipe in pipe_properties])
        system_properties['E'] = pipe_properties[0]['equivalent']['E']
        system_properties['SMYS'] = pipe_properties[0]['equivalent']['SMYS']
        system_properties['SMUS'] = pipe_properties[0]['equivalent']['SMUS']
        system_properties['Poissonsratio'] = pipe_properties[0]['equivalent']['Poissonsratio']
        system_properties['specific_density'] = pipe_properties[0]['equivalent']['mass']['specific_density']
        
        return pipe_properties[0]
    
    def pipe_properties(self, pipe_cfg):
        if pipe_cfg['Nominal_ID'] == None:
            pipe_cfg['Nominal_ID'] = pipe_cfg['Nominal_OD'] \
                                              - 2*pipe_cfg['Design_WT'] \
                                            
        ID_with_corrosion = pipe_cfg['Nominal_ID'] + 2 * pipe_cfg['Corrosion_Allowance'] * pipe_cfg['average_internal_metal_loss_percentage']/100

        if pipe_cfg['Nominal_OD'] == None:
            pipe_cfg['Nominal_OD'] = pipe_cfg['Nominal_ID'] \
                                              + 2*pipe_cfg['Design_WT']
        
        if pipe_cfg['Design_WT'] == None:
            pipe_cfg['Design_WT'] = (pipe_cfg['Nominal_OD'] \
                                              - pipe_cfg['Nominal_ID'])/2

        WT_with_corrosion = (pipe_cfg['Nominal_OD'] - ID_with_corrosion)/2

        dimensions = {'nominal': {'OD': pipe_cfg['Nominal_OD'], 'ID': pipe_cfg['Nominal_ID'], 'WT': pipe_cfg['Design_WT']},
                'with_corrosion': {'OD': pipe_cfg['Nominal_OD'], 'ID': ID_with_corrosion, 'WT': WT_with_corrosion},}

        pipe_properties = {'dimensions': dimensions.copy()}

        material_properties = self.get_material_properties(pipe_cfg)
        pipe_properties['material'] = material_properties.copy()

        section_properties = self.get_section_properties(pipe_cfg, pipe_properties)
        pipe_properties['section'] = section_properties.copy()

        coating_properties = self.get_coating_properties(pipe_cfg)
        pipe_properties['coating'] = coating_properties.copy()
        
        internal_fluid_properties = self.get_internal_fluid_properties(pipe_cfg, pipe_properties)
        pipe_properties['internal_fluid'] = internal_fluid_properties.copy()
        
        buoyancy_properties = self.get_buoyancy_properties(pipe_cfg, pipe_properties)
        pipe_properties['buoyancy'] = buoyancy_properties.copy()

        equivalent_properties = self.get_equivalent_properties(pipe_properties)
        pipe_properties['equivalent'] = equivalent_properties.copy()
        
        return pipe_properties

    def get_section_properties(self, pipe_cfg, pipe_properties):
        dimensions = pipe_properties['dimensions']
        material_properties = pipe_properties['material']
        
        OD = dimensions['with_corrosion']['OD']
        ID = dimensions['with_corrosion']['ID']

        Ao = (math.pi / 4) * (OD ** 2)
        Ai = (math.pi / 4) * (ID ** 2)
        Io = (math.pi / 64) * (OD ** 4)
        Ii = (math.pi / 64) * (ID ** 4)
        Jo = (math.pi / 32) * (OD ** 4)
        Ji = (math.pi / 32) * (ID ** 4)

        A = Ao - Ai
        I = Io - Ii
        J = Jo - Ji

        mass = A*material_properties['Rho']
        EI = I * material_properties['E']
        EA = A * material_properties['E']
        GJ = J * material_properties['G']

        section_properties = {"Ao": Ao, "Ai": Ai, "Io": Io, "Ii": Ii,
                                                      "Jo": Jo, "Ji": Ji,
                                                      "A": A, "I": I,  "J": J, "mass": mass, "EI": EI, "EA": EA, "GJ": GJ, }

        return section_properties

    def get_material_properties(self, pipe_cfg):
        steel_material_file_name = 'data/steel_material.yml'
        library_name = 'digitalmodel'
        library_cfg = {
            'filename': steel_material_file_name,
            'library_name': library_name
        }

        steel_material_file_name = wwy.get_library_filename(library_cfg)
        steel_material_properties_ref = ymlInput(steel_material_file_name)
        material = pipe_cfg['Material']
        if material == 'steel':
            material_grade = pipe_cfg['Material_Grade']
            material_properties = steel_material_properties_ref['Grades'][material_grade]
            material_properties.update(steel_material_properties_ref['common'])
        else:
            raise ValueError("Material not implemented")

        return material_properties.copy()

    def get_equivalent_properties(self, pipe_properties):
        section_properties = pipe_properties['section']
        material_properties = pipe_properties['material']
        coating_properties = pipe_properties['coating']
        internal_fluid_properties = pipe_properties['internal_fluid']
        buoyancy_properties = pipe_properties['buoyancy']

        mass_air_without_internal_fluid = section_properties['mass'] + sum([coating['mass'] for coating in coating_properties])
        mass_air_with_internal_fluid = mass_air_without_internal_fluid + internal_fluid_properties['mass']
        
        total_buoyancy = buoyancy_properties['mass'] + sum([coating['buoyancy'] for coating in coating_properties])
        mass_water_without_internal_fluid = mass_air_without_internal_fluid - total_buoyancy
        mass_water_with_internal_fluid = mass_air_with_internal_fluid - total_buoyancy

        specific_density = mass_air_without_internal_fluid/total_buoyancy

        mass_dict = {'air': {'without_internal_fluid': mass_air_without_internal_fluid, 'with_internal_fluid': mass_air_with_internal_fluid}, 
                'water': {'without_internal_fluid': mass_water_without_internal_fluid, 'with_internal_fluid': mass_water_with_internal_fluid},
                'specific_density': specific_density}

        EI = section_properties['EI']
        EA = section_properties['EA']
        GJ = section_properties['GJ']

        equivalent_properties = {"mass": mass_dict,
                                                    "EI": EI, "EA": EA, "GJ": GJ, "E": material_properties['E'],
                                                    "SMYS": material_properties['SMYS'],
                                                    "SMUS": material_properties['SMUS'],
                                                    "Poissonsratio": material_properties['Poissonsratio']}

        return equivalent_properties.copy()

    def get_coating_properties(self, pipe_cfg):
        Nominal_OD = pipe_cfg['Nominal_OD']
        coatings = pipe_cfg['coatings']
        coating_id = Nominal_OD
        for coating in coatings:
            coating['ID'] = coating_id
            coating['OD'] =  coating_id + 2*coating['thickness']
            coating_area = (math.pi / 4) * (coating['OD'] ** 2 - coating['ID'] ** 2)
            coating['mass'] = coating_area * coating['density']
            if coating['material'] == 'concrete':
                concrete_water_absorption_rate_percent = coating.get('concrete_water_absorption_rate_percent', 0)
                coating['buoyancy'] = coating['mass'] * (1 - concrete_water_absorption_rate_percent / 100)
            else:
                coating['buoyancy'] = 0
            # set ID for next coating
            coating_id = coating['OD']

        return coatings.copy()
    
    def get_internal_fluid_properties(self, pipe_cfg, pipe_properties):
        section_properties = pipe_properties['section']
        internal_fluid = pipe_cfg['internal_fluid']
        mass = internal_fluid['density'] * section_properties['Ai']
        
        reference_pressure = internal_fluid['pressure']['pressure']
        
        density = internal_fluid['density']
        depth = internal_fluid['pressure']['top_side_elevation'] + internal_fluid['pressure']['reference_water_depth']
        depth = depth * 12
        internal_pressure = reference_pressure + density * depth
        
        
        internal_fluid_properties = {'mass': mass, 'pressure': internal_pressure}
        return internal_fluid_properties
    
    def get_buoyancy_properties(self, pipe_cfg, pipe_properties):
        coating_properties = pipe_properties['coating']
        OD = coating_properties[-1]['OD']
        fluid_density = pipe_cfg['external_fluid']['density']
        fluid_area = (math.pi / 4) * (OD ** 2)
        fluid_mass = fluid_area * fluid_density

        buoyancy_properties = {'mass': fluid_mass}

        return buoyancy_properties